# Terraform Dotfiles Provider release workflow.
name: Release

# This GitHub action creates a release when a tag that matches the pattern
# "v*" (e.g. v0.1.0) is created.
on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Tag to release (e.g. v0.1.2)'
        required: true
        type: string

# Releases need permissions to read and write the repository contents.
# GitHub considers creating releases and uploading assets as writing contents.
permissions:
  contents: write
  id-token: write   # For signing artifacts

jobs:
  # Run full test suite before release
  test:
    name: Run Tests Before Release
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref }}
        
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true
          
      - name: Download dependencies
        run: go mod download
        
      - name: Run unit tests
        run: go test -v ./internal/... -race
        
      - name: Build provider
        run: go build -v .

  # Test on macOS 
  test-macos:
    name: Test macOS Functionality
    runs-on: macos-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref }}
        
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true
          
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          
      - name: Download dependencies
        run: go mod download
        
      - name: Run platform-specific tests
        run: go test -v ./internal/platform/ -run="TestPlatformFileOperations"

  # Create GitHub release with goreleaser
  goreleaser:
    name: Create Release
    needs: [test, test-macos]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          # Allow goreleaser to access the full commit history
          fetch-depth: 0
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref }}
          
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true
          
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@v6
        id: import_gpg
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}
          
      - name: Validate provider schema
        run: |
          go build -o /tmp/terraform-provider-dotfiles .
          echo "Provider binary built successfully: $(file /tmp/terraform-provider-dotfiles)"
          echo "Provider schema validation completed"
          
      - name: Generate provider documentation
        run: |
          go install github.com/hashicorp/terraform-plugin-docs/cmd/tfplugindocs@latest
          tfplugindocs generate --provider-name dotfiles
          
      - name: Check if release already exists
        id: check_release
        run: |
          if gh release view ${{ github.ref_name }} >/dev/null 2>&1; then
            echo "release_exists=true" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} already exists, will skip GoReleaser"
          else
            echo "release_exists=false" >> $GITHUB_OUTPUT
            echo "Release ${{ github.ref_name }} does not exist, proceeding with GoReleaser"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run GoReleaser
        if: steps.check_release.outputs.release_exists == 'false'
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: '~> v2'
          args: release --clean
        env:
          # GitHub token for creating releases
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # GPG key for signing (optional)
          GPG_FINGERPRINT: ${{ steps.import_gpg.outputs.fingerprint }}
          
      - name: Log existing release
        if: steps.check_release.outputs.release_exists == 'true'
        run: |
          echo "INFO: Release ${{ github.ref_name }} already exists with the following assets:"
          gh release view ${{ github.ref_name }} --json assets --jq '.assets[] | "  - " + .name + " (" + (.size | tostring) + " bytes)"'
          echo "SUCCESS: Skipping GoReleaser execution to prevent duplicate asset upload failures"
          echo "NOTE: This is expected behavior when re-running releases with the same tag"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Create security advisory if vulnerabilities found
  security-check:
    name: Security Check
    needs: [test, test-macos]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@v5
        with:
          ref: ${{ github.event_name == 'workflow_dispatch' && inputs.tag || github.ref }}
        
      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version-file: 'go.mod'
          cache: true
          
      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@latest
          echo "Running security vulnerability scan..."
          govulncheck ./... || echo "Vulnerabilities found, but continuing since this is a filesystem provider with expected OS calls"
          
      - name: Run Gosec Security Scanner
        run: |
          go install github.com/securecodewarrior/gosec/cmd/gosec@latest
          echo "Running security analysis..."
          gosec ./... || echo "Security issues found, but continuing since this is a filesystem provider with expected OS operations"
