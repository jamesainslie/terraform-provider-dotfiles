# Security scanning workflow for terraform-provider-dotfiles
name: Security

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run security scan daily at 3 AM UTC
    - cron: '0 3 * * *'
  workflow_dispatch:

# Security scanning needs permissions to write security events
permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  # Dependency vulnerability scanning
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Install govulncheck
        run: go install golang.org/x/vuln/cmd/govulncheck@latest

      - name: Run govulncheck
        run: |
          echo "Running govulncheck for vulnerability scanning..."
          govulncheck -json ./... > govulncheck-report.json || true

          # Display human-readable output
          echo "=== Vulnerability Report ==="
          govulncheck ./... || echo "Vulnerabilities found (see details above)"

      - name: Upload govulncheck report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: govulncheck-report
          path: govulncheck-report.json
          retention-days: 30

  # Static security analysis
  security-analysis:
    name: Security Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Install gosec
        run: go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest

      - name: Run gosec security scanner
        run: |
          echo "Running gosec security analysis..."
          gosec -fmt sarif -out gosec-report.sarif ./...
          gosec -fmt json -out gosec-report.json ./...

          # Display human-readable output
          echo "=== Security Analysis Report ==="
          gosec ./... || echo "Security issues found (see SARIF report for details)"

      - name: Upload SARIF report
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: gosec-report.sarif
          category: gosec

      - name: Upload gosec reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: gosec-reports
          path: |
            gosec-report.sarif
            gosec-report.json
          retention-days: 30

  # CodeQL analysis
  codeql:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      actions: read
      contents: read
      security-events: write
    strategy:
      fail-fast: false
      matrix:
        language: [ 'go' ]
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          queries: security-extended,security-and-quality

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{matrix.language}}"

  # License compliance check
  license-check:
    name: License Compliance
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@latest

      - name: Check licenses
        run: |
          echo "Checking dependency licenses..."
          go-licenses report ./... > license-report.txt
          echo "=== License Report ==="
          cat license-report.txt

          # Check for forbidden licenses (customize as needed)
          if grep -E "(GPL|AGPL|LGPL)" license-report.txt; then
            echo "ERROR: Found copyleft licenses that may not be compatible"
            echo "Please review the licenses above"
            exit 1
          else
            echo " No problematic licenses found"
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report
          path: license-report.txt
          retention-days: 30

  # Security summary
  security-summary:
    name: Security Summary
    needs: [vulnerability-scan, security-analysis, codeql, license-check]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-reports/

      - name: Generate security summary
        run: |
          echo "# Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Job Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- Vulnerability Scan: ${{ needs.vulnerability-scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Analysis: ${{ needs.security-analysis.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- CodeQL Analysis: ${{ needs.codeql.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- License Check: ${{ needs.license-check.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Overall status
          if [[ "${{ needs.vulnerability-scan.result }}" == "success" &&
                "${{ needs.security-analysis.result }}" == "success" &&
                "${{ needs.codeql.result }}" == "success" &&
                "${{ needs.license-check.result }}" == "success" ]]; then
            echo "##  Overall Status: PASS" >> $GITHUB_STEP_SUMMARY
            echo "All security checks completed successfully." >> $GITHUB_STEP_SUMMARY
          else
            echo "##  Overall Status: ISSUES FOUND" >> $GITHUB_STEP_SUMMARY
            echo "One or more security checks found issues. Please review the reports." >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Available Reports" >> $GITHUB_STEP_SUMMARY
          echo "- Check the Security tab for SARIF reports" >> $GITHUB_STEP_SUMMARY
          echo "- Download artifacts for detailed JSON reports" >> $GITHUB_STEP_SUMMARY

          echo "Security scan completed at $(date)"
