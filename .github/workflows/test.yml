# Comprehensive testing workflow for terraform-provider-dotfiles
name: Tests

on:
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  push:
    branches: [ main ]
    paths-ignore:
      - 'README.md'
      - 'docs/**'
      - '*.md'
  schedule:
    # Run tests daily at 2 AM UTC to catch dependency issues
    - cron: '0 2 * * *'
  workflow_dispatch:

# Testing needs permissions to read repository and write PR comments
permissions:
  contents: read
  pull-requests: write
  security-events: write
  checks: write

jobs:
  # Quality gate - runs first to fail fast on quality issues
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      go-version: ${{ steps.go-version.outputs.version }}
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        id: setup-go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: false

      - name: Get Go version
        id: go-version
        run: echo "version=$(go version | cut -d' ' -f3)" >> $GITHUB_OUTPUT

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Clear Go module cache to avoid stale tools
        run: go clean -modcache

      - name: Install tools
        run: |
          echo "Installing golangci-lint v2.5.0 via official installer..."
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/HEAD/install.sh | sh -s -- -b $(go env GOPATH)/bin v2.5.0
          make tools

      - name: Run comprehensive quality checks
        run: make quality

      - name: Run security scan
        run: make security || echo "Security scan completed with warnings"

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: gosec.sarif
        continue-on-error: true

  # Code generation verification
  generate:
    name: Generated Code Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_wrapper: false

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Install tools
        run: make tools

      - name: Generate documentation and code
        run: make generate

      - name: Verify no changes
        run: |
          git diff --compact-summary --exit-code || \
            (echo "Unexpected changes after code generation. Run 'make generate' and commit the changes."; git diff; exit 1)

  # Multi-dimensional test matrix
  test-matrix:
    name: Tests
    needs: [quality-gate, generate]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        go-version: ['1.23.x', '1.24.x', '1.25.x']
        terraform-version: ['1.0.*', '1.2.*', '1.4.*', '1.9.*']
        include:
          # Test edge cases with specific combinations
          - os: ubuntu-latest
            go-version: '1.25.x'
            terraform-version: '1.9.*'
            coverage: true
          - os: macos-latest
            go-version: '1.25.x'
            terraform-version: '1.9.*'
            race: true
        exclude:
          # Skip some combinations to reduce matrix size
          - os: windows-latest
            go-version: '1.23.x'
          - os: windows-latest
            terraform-version: '1.0.*'

    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version: ${{ matrix.go-version }}
          cache: true

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@b9cd54a3c349d3f38e8881555d616ced269862dd # v3.1.2
        with:
          terraform_version: ${{ matrix.terraform-version }}
          terraform_wrapper: false

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Download dependencies
        run: go mod download

      - name: Run unit tests
        run: |
          if [[ "${{ matrix.race }}" == "true" ]]; then
            make test-race
          else
            make test
          fi
        shell: bash

      - name: Run tests with coverage
        if: matrix.coverage
        run: make test-coverage

      - name: Upload coverage reports
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: go-${{ matrix.go-version }}-${{ matrix.os }}

      - name: Run acceptance tests
        env:
          TF_ACC: "1"
        run: go test -v -timeout 30m ./internal/provider/
        timeout-minutes: 35

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    needs: quality-gate
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout
        uses: actions/checkout@ff7abcd0c3c05ccf6adc123a8cd1fd4fb30fb493 # v5.0.0

      - name: Set up Go
        uses: actions/setup-go@c0137caad775660c0844396c52da96e560aba63d # v6.0.0
        with:
          go-version-file: go.mod
          cache: true

      - name: Set Go toolchain environment
        run: |
          echo "GOTOOLCHAIN=go1.25.1" >> $GITHUB_ENV
          echo "GOPROXY=https://proxy.golang.org,direct" >> $GITHUB_ENV

      - name: Run benchmarks
        run: make benchmark

      - name: Compare with previous benchmarks
        run: make bench-compare || echo "No previous benchmark to compare"
